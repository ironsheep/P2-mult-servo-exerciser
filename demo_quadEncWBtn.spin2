'' =================================================================================================
''
''   File....... demo_quadEncWBtn.spin2
''   Purpose.... Demonstrate Basic quad encoder behavior
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2023 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... May 2023
''   Updated.... 12 May 2023
''
'' =================================================================================================

CON { timing }

    CLK_FREQ = 270_000_000                                        ' system freq as a constant
    _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

    RX1      = 63  { I }                                          ' programming / debug
    TX1      = 62  { O }

    SF_CS    = 61  { O }                                          ' serial flash
    SF_SCK   = 60  { O }
    SF_SDO   = 59  { O }
    SF_SDI   = 58  { I }

CON { application io pins }

    ' NOTE: pins 24 & 25 also use 26 & 27 to determine rate of rotation
    QUAD_ENC_CLK = 26  { I }
    QUAD_ENC_DAT = 27  { I }
    QUAD_ENC_BTN = 28  { I }

    SRVO_OFST_RANGE = 750       ' NOTE customize this to adjut servo range span
    SRVO_OFST_CNTR = 1500
    SRVO_OFST_MIN = SRVO_OFST_CNTR - SRVO_OFST_RANGE
    SRVO_OFST_MAX = SRVO_OFST_CNTR + SRVO_OFST_RANGE
    SRVO_PULSE_WIDTH_MS = 50    ' pulse width in milliSeconds

    ' multiply the runtime-determined spin rate of the encoder knob
    ENC_RATE_SCALE = 4          ' 2 = 5 turns end-to-end, 4 = 3 turns end-to-end

OBJ

   quadEnc : "isp_quadEncWBtn_sp"

DAT
    priorPosition   LONG    -1
    deltaPosition   LONG    -1
    desiredOffset   LONG    0

PUB main() | currPosn, currRate, tmpOffset

    quadEnc.start(QUAD_ENC_CLK, QUAD_ENC_DAT, QUAD_ENC_BTN)

    repeat
        if quadEnc.isButtonPressed()
            debug("* Button Pressed")
        currPosn, currRate := quadEnc.positionRate()
        if currPosn <> priorPosition
            deltaPosition := currPosn - priorPosition
            priorPosition := currPosn
            debug("* Rotary Encoder at ", sdec_(currPosn), ", delta ", sdec_(deltaPosition))
            tmpOffset := desiredOffset + (deltaPosition * currRate * 4)
            desiredOffset := SRVO_OFST_MIN #> tmpOffset <# SRVO_OFST_MAX
            debug("* -----  ", sdec_(desiredOffset), "  -----")
            debug("   ")
        waitms(250)

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2023 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
