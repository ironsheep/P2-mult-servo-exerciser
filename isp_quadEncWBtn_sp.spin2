'' =================================================================================================
''
''   File....... isp_quadEncWBtn_sp.spin2
''   Purpose.... provide access to rotary values and button press (using Smart Pins)
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2023 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... May 2023
''   Updated.... 12 May 2023
''
'' =================================================================================================
''

CON { app constants }

    ENC_STACK_SIZE_LONGS = 64

VAR

    LONG    quadEncCog

    LONG    encPosition
    LONG    encPriorPosition
    long    encSampleCt

    LONG    encRate
    LONG    encPriorRate
    long    encRateSampleCt

    LONG    encBits
    LONG    encStack[ENC_STACK_SIZE_LONGS]

    LONG    pinEnc0
    LONG    pinEnc1
    LONG    pinRateEnc0     ' pinEnc0 - 2
    LONG    pinRateEnc1     ' pinEnc1 - 2
    LONG    pinEncBtn

pub null()

'' This is not a top-level object

PUB start(pnEnc0, pnEnc1, pnBtn) | lowPin, highPin

    lowPin := pnEnc0 < pnEnc1 ? pnEnc0 : pnEnc1
    highPin := pnEnc0 < pnEnc1 ? pnEnc1 : pnEnc0
    if lowPin + 1 <> highPin
        debug("enc: pins must be adjacent! (", udec_(lowPin), ") and (", udec_(highPin), ") are not!  Aborting")
        Abort

    pinEnc0 := lowPin
    pinEnc1 := highPin
    pinEncBtn := pnBtn
    pinRateEnc0 := pinEnc0 - 2     ' pins for rate determination
    pinRateEnc1 := pinEnc1 - 2

    debug("enc: pins [", udec_(pinEnc0), ", ", udec_(pinEnc1), "], btn pin [", udec_(pinEncBtn), "]")

    quadEncCog := cogspin(NewCog, TaskContinuousEncoderSmartPin(), @encStack) + 1
    if not quadEncCog
        debug("enc: ERROR: Failed to start Quad Encoder Task!  Aboting")
        abort

PUB stop()
    ' if our task is running stop it
    if quadEncCog
        cogstop(quadEncCog - 1)
        quadEncCog := 0
    ' disable our smart pins
    pinclear(pinEnc0)                                   ' clear any prior modes
    pinclear(pinEnc1)
    pinclear(pinRateEnc0)                                   ' clear any prior modes
    pinclear(pinRateEnc1)
    pinf(pinEnc0)
    pinf(pinEnc1)
    pinf(pinRateEnc0)
    pinf(pinRateEnc1)

PUB isButtonPressed() : bIsPressed | bTmpChanged, tmpValue
'' Return T/F where T means button was pressed
    bTmpChanged := btnChanged
    tmpValue := btnValue
    btnChanged := FALSE
    bIsPressed := bTmpChanged and tmpValue == 0

PUB position() : currPosn
'' Return current quadEncoder position N where N=[-n < 0 < n]
    currPosn := encPosition

PUB rate() : currRate
'' Return current quadEncoder rate of rotation N where N=[0-n]
    currRate := encRate

PUB positionRate() : currPosn, currRate
'' Return current quadEncoder position N where N=[-n < 0 < n]
''  and current quadEncoder rate of rotation N where N=[0-n]
    currPosn := encPosition
    currRate := encRate

VAR

    long    btnValue
    long    btnSample
    long    btnPriorSample
    long    btnChanged
    long    btnSampleCount

PRI TaskContinuousEncoderSmartPin() | sampleRate, bDataRdy, tmpEncPosition, tmpEncRate
' read quad encoder signals attached to smart pins, update postion based on change
    debug("TASK: quad enc running")
    pinclear(pinEnc0)                                   ' clear any prior modes
    pinclear(pinEnc1)
    pinclear(pinRateEnc0)                               ' clear any prior modes
    pinclear(pinRateEnc1)
    wrpin(pinEnc0, P_PLUS1_B | P_QUADRATURE)            ' Set Quad-Encoder mode, 2 pins
    wrpin(pinRateEnc0, P_PLUS2_A | P_PLUS3_B | P_QUADRATURE)  ' Set Quad-Encoder mode, 2 pins - 2 smart pins below quad pins
    'sampleRate := clkfreq/ 2
    wxpin(pinEnc0, 0)                                   ' Set Quad-Encoder sample: continuous
    sampleRate := clkfreq / 4                           ' sample rate = 1/4 sec
    wxpin(pinRateEnc0, sampleRate)                      ' Set Quad-Encoder sample: 4 Hz
    pinlow(pinEnc0)                                     ' enable decoders
    pinlow(pinRateEnc0)
    encPosition := 0
    encPriorPosition := -1
    encSampleCt := -1
    btnPriorSample := -1
    repeat
        ' check rotary - count
        tmpEncPosition := rdpin(pinEnc0) >> 2 signx 29 ' div by 4
        if encPriorPosition <> tmpEncPosition
            encSampleCt++
            encPriorPosition := encPosition := tmpEncPosition
            debug("TASK: enc #", udec_(encSampleCt), ", ", sdec(encPosition))

        ' check rotary - rate
        bDataRdy := pinr(pinRateEnc0)
        if bDataRdy
            tmpEncRate := rdpin(pinRateEnc0) >> 2 signx 29 ' div by 4
            if encPriorRate <> tmpEncRate
                encRateSampleCt++
                encPriorRate := tmpEncRate
                encRate := abs tmpEncRate
                debug("TASK: encRate #", udec_(encRateSampleCt), ", ", sdec(encRate))

        ' check button
        btnSample := ina.[pinEncBtn]
        if not btnChanged and btnPriorSample <> btnSample
            btnValue := btnSample
            btnPriorSample := btnSample
            btnChanged := TRUE
            btnSampleCount++
            debug("TASK: btn ", udec_(btnValue), ", #", udec_(btnSampleCount))

CON { license }

{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2023 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================

}}
